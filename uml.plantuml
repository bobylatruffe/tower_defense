@startuml "tower_defense_uml"

/' left to right direction '/
/' skinparam linetype ortho '/
/' skinparam linetype polyline '/

class GameManager implements I_UIObserver, I_GameManagerMediator {
    - gameboardManager : A_GameboardManager
    - waveManager : A_WaveManager
    - shopManager : A_ShopManager
    - playerManager : A_PlayerManager
    - systemObserver : I_SystemObserver
    + start()
    + end()
}

class System implements I_SystemObserver {
    - hudManager : A_HudManager
    - soundManager : I_SoundManager
    - logger : List<I_Logger>
    - gameManager : GameManager
}

interface I_Logger {
    + log()
}


class FileLogger implements I_Logger {
}

class ConsoleLogger implements I_Logger {
}

class DatabaseLogger implements I_Logger {
}

' note left of GameManager
'     Orchestre le cycle de vie du jeu en
'     coordonnant les différents gestionnaires
'     nécessaires au fonctionnement du TowerDefense.
' end note

abstract class A_GameboardManager  {
    - mediator : I_GameManagerMediator
    - towers : List<A_Tower>
    - enemies : List<I_Enemie>
    + addEnemy(enemie : I_Enemie)
    + addTower(tower : A_Tower)
}

abstract class A_WaveManager  {
    - mediator : I_GameManagerMediator
    - currentLevel : int
    - enemieAbstractFactory : I_EnemieAbstractFactory
    + startWave()
}

interface I_EnemieAbstractFactory {
    + createWalkingEnemie() : A_Enemie
    + createFlyingEnemie() : A_Enemie
    + createTeleportingEnemie() : A_Enemie
}

A_WaveManager --> I_EnemieAbstractFactory

class LowSpeedEnemieFactory implements I_EnemieAbstractFactory {
    + createWalkingEnemie() : A_Enemie
    + createFlyingEnemie() : A_Enemie
    + createTeleportingEnemie() : A_Enemie
}

LowSpeedEnemieFactory ..> A_Enemie

class MediumSpeedEnemieFactory implements I_EnemieAbstractFactory {
    + createWalkingEnemie() : A_Enemie
    + createFlyingEnemie() : A_Enemie
    + createTeleportingEnemie() : A_Enemie
}

MediumSpeedEnemieFactory ..> A_Enemie

class HighSpeedEnemieFactory implements I_EnemieAbstractFactory {
    + createWalkingEnemie() : A_Enemie
    + createFlyingEnemie() : A_Enemie
    + createTeleportingEnemie() : A_Enemie
}

HighSpeedEnemieFactory ..> A_Enemie

abstract class A_ShopManager {
    - mediator : I_GameManagerMediator
    - towerFactory : I_TowerFactory
    + buyTower() : A_Tower
    + sendTowerImageAvailable()
}

abstract class A_PlayerManager  {
    - mediator : I_GameManagerMediator
    + getLifePoint()
    + getMoney()
}

class TowerFactory implements I_TowerFactory {

}

A_ShopManager --> I_TowerFactory

abstract class A_HudManager {
    - uiObserver : I_UIObserver
    + showLevel(int level)
    + showTowerShop(towersImages : List<Tower  Image>)
    + showMenu()
    + showError()
    + sendUIEvent()
}

interface I_TowerFactory {
    + createTower(typeTower : string) : A_Tower
}

interface I_SoundManager {
    + increase()
    + decrease()
    + mute()
}

interface I_SystemObserver {
    + onEvent()
}

interface I_UIObserver {
    + onEventFromUI()
}

interface I_GameManagerMediator {
    + notifyGameManager()
}

/' GameManager o-- A_GameboardManager
GameManager o-- A_WaveManager
GameManager o-- A_ShopManager
GameManager o-- A_PlayerManager
GameManager o-- I_SystemObserver '/

System *-- A_HudManager
System *-- I_SoundManager
System *-- I_Logger
System *-- GameManager

A_HudManager --> I_UIObserver

I_GameManagerMediator <-- A_GameboardManager
I_GameManagerMediator <-- A_PlayerManager
I_GameManagerMediator <-- A_WaveManager
I_GameManagerMediator <-- A_ShopManager

A_GameboardManager o-- A_Tower
A_GameboardManager o-- A_Enemie

TowerFactory ..> A_Tower

abstract class A_Tower {
    - currentDamage : int
    - rangeProjectile : int
    - speedProjectile : int
    + shoot()
}

class SimpleTower implements A_Tower {
    
}

class MediumTower implements A_Tower {
    
}

class HardTower implements A_Tower {
    
}

abstract class A_Enemie {
    - currentDamage : int
    - speed : int
    + move()
}

class SimpleGameBoard extends A_GameboardManager {

}



class Hud {

}

class Gameboard {

}

class Wave {

}

class Shop {

}

class Player {

}
@enduml