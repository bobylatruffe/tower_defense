@startuml "tower_defense_uml"

/' left to right direction '/
/' skinparam linetype ortho '/
/' skinparam linetype polyline '/

class GameManager implements I_UIObserver, I_GameManagerMediator {
    - gameboardManager : A_GameboardManager
    - waveManager : A_WaveManager
    - shopManager : A_ShopManager
    - playerManager : A_PlayerManager
    - systemObserver : I_SystemObserver
    - state : I_State
    - eventDispatcher : Dictionnary<EVENT_TYPE, I_Event>
    + {static} instance : GameManager
    + {static} getInstance() : GameManager
    + start()
    + end()
    + registerEvent(eventType : EVENT_TYPE, event : I_Event)
}

interface I_Event {
    + object execute(eventData : object);
}

class AddNewEnemy implements I_Event {
}

AddNewEnemy --> A_GameboardManager

class Blablabla implements I_Event {
}

GameManager *-- I_Event

interface I_State {
    + start()
    + end()
}

GameManager o-- I_State

class WaveTime implements I_State {
    - context : GameManager
    + changeState(context : GameManager)
}

WaveTime --> GameManager

class ShopTime implements I_State {
    - context : GameManager
    + changeState(context : GameManager)
}

ShopTime --> GameManager

class DeathTime implements I_State {
    - context : GameManager
    + changeState(context : GameManager)
}

DeathTime --> GameManager

GameManager --> GameManager

class System implements I_SystemObserver {
    - hudManager : A_HudManager
    - soundManager : I_SoundManagers
    - logger : List<I_Logger>
    - gameManager : GameManager
    - {static} instance

    + {static} getInstance() : System
}

System --> System

interface I_Logger {
    + log()
}

class FileLogger implements I_Logger {
}

class ConsoleLogger implements I_Logger {
}

' note left of GameManager
'     Orchestre le cycle de vie du jeu en
'     coordonnant les différents gestionnaires
'     nécessaires au fonctionnement du TowerDefense.
' end note

abstract class A_GameboardManager  {
    - rows : int
    - cols : int
    - mediator : I_GameManagerMediator
    - entries : List<Case>
    - leaves : List<Case>
    - towers : List<A_Tower>
    - enemies : List<I_Enemie>
    + addEnemy(enemie : I_Enemie)
    + addTower(tower : A_Tower)
    + upgradeTower(tower : A_Tower)
    + getEntry() : Case
    + getLeave() : Case
}

A_GameboardManager o-- A_Tower
BaseTowerDecorator o-- A_Tower

class BaseTowerDecorator extends A_Tower {
    - wrappee : A_Tower
    + shoot()
}

class TowerDecorator extends BaseTowerDecorator {
    + shoot()
}

/' A_GameboardManager *-- TowerDecorator '/
/' A_GameboardManager --> TowerDecorator '/

abstract class A_WaveManager  {
    - mediator : I_GameManagerMediator
    - currentLevel : int
    - enemieAbstractFactory : A_EnemieAbstractFactory
    + startWave()
}

abstract class A_EnemieAbstractFactory {
    + createWalkingEnemie() : A_Enemie
    + createFlyingEnemie() : A_Enemie
    + createTeleportingEnemie() : A_Enemie
}

A_WaveManager --> A_EnemieAbstractFactory
A_WaveManager <|-- SimpleWaveManager

class StudentEnemieFactory extends A_EnemieAbstractFactory {
    - prefabWalkingEnemies : List<Prebab>
    - prefabFlyingEnemies : List<Prefab>
    - prefabTeleportingEnemies : List<Prefab>
    + createWalkingEnemie() : A_Enemie
    + createFlyingEnemie() : A_Enemie
    + createTeleportingEnemie() : A_Enemie
}

StudentEnemieFactory ..> A_Enemie

class SimpleEnemieFactory extends A_EnemieAbstractFactory {
    - prefabWalkingEnemies : List<Prebab>
    - prefabFlyingEnemies : List<Prefab>
    - prefabTeleportingEnemies : List<Prefab>
    + createWalkingEnemie() : A_Enemie
    + createFlyingEnemie() : A_Enemie
    + createTeleportingEnemie() : A_Enemie
}

SimpleEnemieFactory ..> A_Enemie

abstract class A_ShopManager {
    - mediator : I_GameManagerMediator
    - towerFactory : A_TowerFactory
    + buyTower() : A_Tower
    + sendTowerImageAvailable()
}

abstract class A_PlayerManager  {
    - mediator : I_GameManagerMediator
    - lifePoint : int
    - money : int
    + showMainMenu()
    + showTowerShop()
}

class TowerFactory implements A_TowerFactory {

}

A_ShopManager --> A_TowerFactory

abstract class A_HudManager {
    - uiObserver : I_UIObserver
    + showLevel(int level)
    + showTowerShop(towersImages : List<Tower  Image>)
    + showMenu()
    + showError()
    + sendUIEvent()
}

interface A_TowerFactory {
    + createTower(typeTower : string) : A_Tower
}

interface I_SoundManager {
    + increase()
    + decrease()
    + mute()
}

interface I_SystemObserver {
    + onEvent()
}

interface I_UIObserver {
    + onEventFromUI()
}

interface I_GameManagerMediator {
    + onEventFromManagers()
}

/' GameManager o-- A_GameboardManager
GameManager o-- A_WaveManager
GameManager o-- A_ShopManager
GameManager o-- A_PlayerManager
GameManager o-- I_SystemObserver '/

System *-- A_HudManager
System *-- I_SoundManager
System *-- I_Logger
System *-- GameManager

A_HudManager --> I_UIObserver

I_GameManagerMediator <-- A_GameboardManager
I_GameManagerMediator <-- A_PlayerManager
I_GameManagerMediator <-- A_WaveManager
I_GameManagerMediator <-- A_ShopManager

/' A_GameboardManager o-- A_Tower '/
A_GameboardManager o-- A_Enemie

TowerFactory ..> A_Tower

abstract class A_Tower {
    - mediator : I_GameManagerMediator
    - strategy : I_TowerStrategy
    + shoot()
}

A_Tower --> I_GameManagerMediator

class SimpleTower extends A_Tower {
    
}

interface I_MoveStrategy {
    + move()
}

abstract class A_Enemie {
    - currentDamage : int
    - speed : int
    - specialMove : I_MoveStrategy
    - isMoving : boolean
    - mediator : I_GameManagerMediator
    + takeDamage()
    + addSpecialMove(moveStrategy : I_MoveStrategy)
}

A_Enemie --> I_MoveStrategy
A_Enemie --> I_GameManagerMediator

class SimpleGameBoard extends A_GameboardManager {

}

class TrackFirstClosestEnemy implements I_TowerStrategy {
    
}

A_Tower o-- I_TowerStrategy

class Player extends A_PlayerManager {
    
}

interface I_DetectorEnemyWinObserver {
    + enemyWin(enemy : A_Enemie)
}

class DetectorEnemyWin {
    - gameboardManager : I_DetectorEnemyWinObserver
}

abstract class A_GameboardManager implements I_DetectorEnemyWinObserver {
    
}

DetectorEnemyWin --> I_DetectorEnemyWinObserver

@enduml