@startuml "tower_defense_uml"

/' left to right direction '/
/' skinparam linetype ortho '/
/' skinparam linetype polyline '/

class GameManager implements I_UIObserver, I_GameManagerMediator {
    - gameboardManager : Gameboard
    - waveManager : A_Wave
    - shopManager : A_Shop
    - playerManager : A_Player
    - systemObserver : I_SystemObserver
    - state : I_State
    - events : Dictionnary<EVENT_TYPE, I_Event>
    + {static} instance : GameManager
    + {static} getInstance() : GameManager
    + start()
    + end()
    + registerEvent(eventType : EVENT_TYPE, event : I_Event)
}

interface I_Event {
    + object execute(eventData : object);
}

class AddNewEnemy implements I_Event {
}

AddNewEnemy --> Gameboard

class EnemyIsDeath implements I_Event {
}

EnemyIsDeath --> A_Player

class Blablabla implements I_Event {
}

GameManager *-- I_Event

interface I_State {
    + start()
    + end()
}

GameManager o-- I_State

class WaveTime implements I_State {
    - context : GameManager
    + changeState(context : GameManager)
}

WaveTime --> GameManager

class ShopTime implements I_State {
    - context : GameManager
    + changeState(context : GameManager)
}

ShopTime --> GameManager

class DeathTime implements I_State {
    - context : GameManager
    + changeState(context : GameManager)
}

DeathTime --> GameManager

GameManager --> GameManager

class System implements I_SystemObserver {
    - hudManager : A_Hud
    - soundManager : I_SoundManagers
    - logger : List<I_Logger>
    - gameManager : GameManager
    - {static} instance

    + {static} getInstance() : System
}

System --> System

interface I_Logger {
    + log()
}

class FileLogger implements I_Logger {
}

class ConsoleLogger implements I_Logger {
}

' note left of GameManager
'     Orchestre le cycle de vie du jeu en
'     coordonnant les différents gestionnaires
'     nécessaires au fonctionnement du TowerDefense.
' end note

abstract class Gameboard  {
    - rows : int
    - cols : int
    - mediator : I_GameManagerMediator
    - entries : List<Case>
    - leaves : List<Case>
    - towers : List<A_Tower>
    - enemies : List<I_Enemie>
    + addEnemy(enemie : I_Enemie)
    + addTower(tower : A_Tower)
    + upgradeTower(tower : A_Tower)
    + getEntry() : Case
    + getLeave() : Case
}

Gameboard o-- A_Tower
BaseTowerDecorator o-- A_Tower

class BaseTowerDecorator extends A_Tower {
    - wrappee : A_Tower
    + shoot()
}

class TowerDecorator extends BaseTowerDecorator {
    + shoot()
}

/' Gameboard *-- TowerDecorator '/
/' Gameboard --> TowerDecorator '/

abstract class A_Wave  {
    - mediator : I_GameManagerMediator
    - currentLevel : int
    - enemieAbstractFactory : I_EnemyAbstractFactory
    + startWave()
}

interface I_EnemyAbstractFactory {
    + createWalkingEnemie() : A_Emeny
    + createFlyingEnemie() : A_Emeny
    + createTeleportingEnemie() : A_Emeny
}

A_Wave --> I_EnemyAbstractFactory
A_Wave <|-- SimpleWave

class StudentEnemieFactory implements I_EnemyAbstractFactory {
    - prefabWalkingEnemies : List<Prebab>
    - prefabFlyingEnemies : List<Prefab>
    - prefabTeleportingEnemies : List<Prefab>
    + createWalkingEnemie() : A_Emeny
    + createFlyingEnemie() : A_Emeny
    + createTeleportingEnemie() : A_Emeny
}

StudentEnemieFactory ..> A_Emeny

class SimpleEnemieFactory implements I_EnemyAbstractFactory {
    - prefabWalkingEnemies : List<Prebab>
    - prefabFlyingEnemies : List<Prefab>
    - prefabTeleportingEnemies : List<Prefab>
    + createWalkingEnemie() : A_Emeny
    + createFlyingEnemie() : A_Emeny
    + createTeleportingEnemie() : A_Emeny
}

SimpleEnemieFactory ..> A_Emeny

abstract class A_Shop {
    - mediator : I_GameManagerMediator
    - towerFactory : I_TowerFactory
    + buyTower() : A_Tower
    + sendTowerImageAvailable()
}

abstract class A_Player  {
    - mediator : I_GameManagerMediator
    - lifePoint : int
    - money : int
    + showMainMenu()
    + showTowerShop()
}

class TowerFactory implements I_TowerFactory {

}

A_Shop --> I_TowerFactory

abstract class A_Hud {
    - uiObserver : I_UIObserver
    + showLevel(int level)
    + showTowerShop(towersImages : List<Tower  Image>)
    + showMenu()
    + showError()
    + sendUIEvent()
}

interface I_TowerFactory {
    + createTower(typeTower : string) : A_Tower
}

interface I_SoundManager {
    + increase()
    + decrease()
    + mute()
}

interface I_SystemObserver {
    + onEvent()
}

interface I_UIObserver {
    + onEventFromUI()
}

interface I_GameManagerMediator {
    + onEventFromManagers()
}

/' GameManager o-- Gameboard
GameManager o-- A_Wave
GameManager o-- A_Shop
GameManager o-- A_Player
GameManager o-- I_SystemObserver '/

System *-- A_Hud
System *-- I_SoundManager
System *-- I_Logger
System *-- GameManager

A_Hud --> I_UIObserver

I_GameManagerMediator <-- Gameboard
I_GameManagerMediator <-- A_Player
I_GameManagerMediator <-- A_Wave
I_GameManagerMediator <-- A_Shop

/' Gameboard o-- A_Tower '/
Gameboard o-- A_Emeny

I_TowerFactory ..> A_Tower

abstract class A_Tower {
    - mediator : I_GameManagerMediator
    - strategy : I_TowerStrategy
    - towerOptions : Gameobject
    + shoot()
}

A_Tower --> I_GameManagerMediator

class TowerCanon extends A_Tower {
    
}

class TowerFusee extends A_Tower {
    
}

class TowerMitraillette extends A_Tower {
    
}

class TowerMissile extends A_Tower {
    
}

interface I_MoveStrategy {
    + move()
}

abstract class A_Emeny {
    - currentDamage : int
    - speed : int
    - specialMove : I_MoveStrategy
    - isMoving : boolean
    - mediator : I_GameManagerMediator
    + takeDamage()
    + addSpecialMove(moveStrategy : I_MoveStrategy)
}

A_Emeny --> I_MoveStrategy
A_Emeny --> I_GameManagerMediator

class SimpleGameBoard extends Gameboard {

}

class TrackFirstClosestEnemy implements I_TowerStrategy {
    
}

A_Tower o-- I_TowerStrategy

class Player extends A_Player {
    
}

interface I_DetectorEnemyWinObserver {
    + enemyWin(enemy : A_Emeny)
}

class DetectorEnemyWin {
    - gameboardManager : I_DetectorEnemyWinObserver
}

abstract class Gameboard implements I_DetectorEnemyWinObserver {
    
}

DetectorEnemyWin --> I_DetectorEnemyWinObserver

@enduml